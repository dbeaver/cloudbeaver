# Metadata queries

type RMProject {
    id: String!
    name: String!
    description: String
    shared: Boolean!

    createTime: DateTime!
    creator: String!
    projectPermissions: [String!]!
}

type RMResource {
    name: String!
    folder: Boolean!
    length: Int!
}

extend type Query {

    # List accessible projects
    rmListProjects: [RMProject!]!

    # List accessible projects
    rmListResources(
        projectId: String!,
        folder: String,
        nameMask: String,
        readProperties: Boolean,
        readHistory: Boolean): [RMResource!]!

    # Reads resource contents as string in UTF-8
    rmReadResourceAsString(
        projectId: String!,
        resourcePath: String!): String!

}

extend type Mutation {

    rmCreateResource(
        projectId: String!,
        resourcePath: String!,
        isFolder: Boolean!): String!

    rmMoveResource(
        projectId: String!,
        oldResourcePath: String!,
        newResourcePath: String): String!

    rmDeleteResource(
        projectId: String!,
        resourcePath: String!,
        recursive: Boolean!): Boolean

    rmWriteResourceStringContent(
        projectId: String!,
        resourcePath: String!,
        data: String!): String!

    rmCreateProject(
        projectName: String!,
        description: String): ProjectInfo

    rmDeleteProject(projectId: ID!): Boolean!
}