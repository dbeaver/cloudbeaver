
enum AdminSubjectType {
    user,
    role
}

type AdminConnectionGrantInfo {
    connectionId: ID! @deprecated(reason: "use dataSourceId instead")
    dataSourceId: ID!
    subjectId: ID!
    subjectType: AdminSubjectType!
}

type AdminConnectionSearchInfo {
    displayName: String!
    host: String!
    port: Int!
    possibleDrivers: [ID!]!
    defaultDriver: ID!
}

type AdminUserInfo {
    userId: ID!

    metaParameters: Object!
    configurationParameters: Object!
    grantedRoles: [ID!]!
    grantedConnections: [AdminConnectionGrantInfo!]!

    origins: [ObjectOrigin!]!

    linkedAuthProviders: [String!]!
    enabled: Boolean!
}

type AdminRoleInfo {
    roleId: ID!
    roleName: String
    description: String

    grantedUsers: [ID!]!
    grantedConnections: [AdminConnectionGrantInfo!]!

    rolePermissions: [ID]!
}

type AdminPermissionInfo {
    id: ID!
    label: String
    description: String

    provider: String!
    category: String
}

type AdminAuthProviderConfiguration {
    providerId: ID!
    id: ID!
    displayName: String!
    disabled: Boolean!

    iconURL: String
    description: String

    parameters: Object!

    signInLink: String
    signOutLink: String
    redirectLink: String
    metadataLink: String
}

type WebFeatureSet {
    id: String!
    label: String!
    description: String
    icon: String

    enabled: Boolean!
}

input ServerConfigInput {
    serverName: String
    serverURL: String

    adminName: String
    adminPassword: String

    anonymousAccessEnabled: Boolean
    authenticationEnabled: Boolean
    customConnectionsEnabled: Boolean
    publicCredentialsSaveEnabled: Boolean
    adminCredentialsSaveEnabled: Boolean
    resourceManagerEnabled: Boolean

    enabledFeatures: [ID!]
    enabledAuthProviders: [ID!]
    disabledDrivers: [ID!]

    sessionExpireTime: Int
}

extend type Query {

    #### Users and roles

    listUsers(userId: ID): [AdminUserInfo]!
    listRoles(roleId: ID): [AdminRoleInfo]!
    listPermissions: [AdminPermissionInfo]!

    createUser(userId: ID!): AdminUserInfo!
    deleteUser(userId: ID!): Boolean

    createRole(roleId: ID!, roleName: String, description: String): AdminRoleInfo!
    updateRole(roleId: ID!, roleName: String, description: String): AdminRoleInfo!
    deleteRole(roleId: ID!): Boolean

    grantUserRole(userId: ID!, roleId: ID!): Boolean
    revokeUserRole(userId: ID!, roleId: ID!): Boolean

    setSubjectPermissions(roleId: ID!, permissions: [ID!]!): Boolean

    setUserCredentials(userId: ID!, providerId: ID!, credentials: Object!): Boolean

    enableUser(userId: ID!, enabled: Boolean!): Boolean

    #### Connection management

    # All connection configurations
    allConnections( id: ID ): [ ConnectionInfo! ]!

    searchConnections( hostNames: [String!]! ): [AdminConnectionSearchInfo!]!

    createConnectionConfiguration( config: ConnectionConfig! ): ConnectionInfo!
    copyConnectionConfiguration( nodePath: String!, config: ConnectionConfig ): ConnectionInfo!
    updateConnectionConfiguration( id: ID!, config: ConnectionConfig! ): ConnectionInfo!
    deleteConnectionConfiguration( id: ID! ): Boolean

    # Permissions

    getConnectionSubjectAccess(connectionId: ID): [AdminConnectionGrantInfo!]!
    setConnectionSubjectAccess(connectionId: ID!, subjects: [ID!]!): Boolean

    getSubjectConnectionAccess(subjectId: ID): [AdminConnectionGrantInfo!]!
    setSubjectConnectionAccess(subjectId: ID!, connections: [ID!]!): Boolean

    #### Feature sets

    listFeatureSets: [WebFeatureSet!]!

    #### Auth providers and configurations

    listAuthProviderConfigurationParameters(providerId: ID!): [ObjectPropertyInfo!]!
    listAuthProviderConfigurations(providerId: ID): [AdminAuthProviderConfiguration!]!

    saveAuthProviderConfiguration(
        providerId: ID!,
        id: ID!,
        displayName: String,
        disabled: Boolean,
        iconURL: String
        description: String
        parameters: Object): AdminAuthProviderConfiguration!
    deleteAuthProviderConfiguration(id: ID!): Boolean!

    #### User profile

    saveUserMetaParameter(id: ID!, displayName: String!, description: String, required: Boolean!): ObjectPropertyInfo!

    deleteUserMetaParameter(id: ID!): Boolean!

    setUserMetaParameterValues(userId: ID!, parameters: Object!): Boolean!

    #### Global configuration

    configureServer(configuration: ServerConfigInput!): Boolean!

    # Changes default navigator settings
    setDefaultNavigatorSettings( settings: NavigatorSettingsInput!): Boolean!

}
