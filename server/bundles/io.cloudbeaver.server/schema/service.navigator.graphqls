# Nodes, objects and properties

type ObjectDescriptor {
    id: Int
    displayName: String
    fullName: String
    uniqueName: String
    description: String
    value: String
}

input ObjectPropertyFilter {
    ids: [String!]
    features: [String!]
    categories: [String!]
    dataTypes: [String!]
}

type ObjectDetails {
    id: Int
    displayName: String
    description: String
    value: Object
}

type DatabaseObjectInfo {
    # Object name
    name: String
    # Description - optional
    description: String
    # Object type. Java class name in most cases
    type: String

    # Read object properties.
    # Optional parameter 'ids' filters properties by id. null means all properties.
    # Note: property value reading may take a lot of time so don't read all property values always
    # Examine property meta (features in particular) before reading them
    properties(filter: ObjectPropertyFilter): [ ObjectPropertyInfo ]

    # Optional properties

    ordinalPosition: Int
    fullyQualifiedName: String
    overloadedName: String
    uniqueName: String
    state: String

    # Features: script, scriptExtended, dataContainer, dataManipulator,
    # entity, schema, catalog
    features: [ String! ]

    # Supported editors: ddl, permissions, sourceDeclaration, sourceDefinition
    editors: [ String! ]
}

type NavigatorNodeInfo {
    # Node ID - generally a full path to the node from root of tree
    id: ID!
    # Node human readable name
    name: String
    #Node full name
    fullName: String
    # Node icon path
    icon: String
    # Node description
    description: String
    # Node type
    nodeType: String
    # Can this property have child nodes?
    hasChildren: Boolean

    # Associated object. Maybe null for non-database objects
    object: DatabaseObjectInfo

    # Supported features: item, container, leaf
    # canDelete, canRename
    features: [ String! ]

    # Object detailed info.
    # If is different than properties. It doesn't perform any expensive operation and doesn't require authentication.
    nodeDetails: [ ObjectPropertyInfo! ]

    folder: Boolean
    inline: Boolean
    navigable: Boolean
}

type DatabaseCatalog {
    catalog: NavigatorNodeInfo!
    schemaList: [ NavigatorNodeInfo! ]!
}

type DatabaseStructContainers {
    catalogList: [ DatabaseCatalog! ]!
    schemaList: [ NavigatorNodeInfo! ]!
    supportsCatalogChange: Boolean!
    supportsSchemaChange: Boolean!
}

####################################################
# Main API
####################################################

extend type Query {

    # Get child nodes
    navNodeChildren(
        parentPath: ID!,
        offset: Int,
        limit: Int,
        onlyFolders: Boolean): [ NavigatorNodeInfo! ]!

    # Get child nodes
    navNodeParents(nodePath: ID!): [ NavigatorNodeInfo! ]!

    navNodeInfo( nodePath: ID! ): NavigatorNodeInfo!

    navRefreshNode( nodePath: ID! ): Boolean

    # contextId currently not using
    navGetStructContainers( connectionId: ID!, contextId: ID, catalog: ID ): DatabaseStructContainers!

}

extend type Mutation {

    # Rename node and returns new node name
    navRenameNode( nodePath: ID!, newName: String! ): String

    # Deletes nodes with specified IDs and returns number of deleted nodes
    navDeleteNodes( nodePaths: [ID!]! ): Int

    # Moves nodes with specified IDs to the connection folder
    navMoveNodesToFolder(nodePaths: [ID!]!, folderPath: ID!): Boolean

}