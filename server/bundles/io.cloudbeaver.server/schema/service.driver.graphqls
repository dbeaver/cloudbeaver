
####################################################
# Drivers API
####################################################

type DriverInfo {
    id: ID!
    name: String
    description: String
    icon: String
    iconBig: String

    # Driver provider ID
    providerId: ID
    # Driver Java class name
    driverClassName: String
    defaultHost: String
    defaultPort: String
    defaultDatabase: String
    defaultServer: String
    defaultUser: String
    sampleURL: String
    driverInfoURL: String
    driverPropertiesURL: String
    embedded: Boolean
    enabled: Boolean!
    requiresServerName: Boolean
    requiresDatabaseName: Boolean

    licenseRequired: Boolean
    license: String
    custom: Boolean
    # Driver score for ordering, biggest first
    promotedScore: Int

    # Never used?
    #connectionProperties: Object
    #defaultConnectionProperties: Object

    # Driver properties.
    # Note: it is expensive property and it may produce database server roundtrips.
    # Call it only when you really need it.
    # These properties are for advanced users in usually shouldn't be specified for new connections.
    driverProperties: [ObjectPropertyInfo!]!
    # Driver parameters (map name->value)
    driverParameters: Object!

    # Additional driver provider properties
    # These properties can be configured by user on main connection page
    # to provide important connection settings
    providerProperties: [ObjectPropertyInfo!]!

    # False for drivers which do not support authentication
    anonymousAccess: Boolean

    defaultAuthModel: ID!
    applicableAuthModels: [ID!]!

    applicableNetworkHandlers: [ID]!

    configurationTypes: [DriverConfigurationType]!

    driverLibraries: [DriverLibraryInfo!]!
}

type DriverProviderInfo {
    id: ID!
    name: String!
    icon: String!
}

type DriverLibraryInfo {
    id: ID!
    name: String!
    icon: String!
}

input DriverConfig {
    id: ID
    name: String!
    providerId: ID!
    driverClassName: String!

    description: String
    sampleURL: String

    defaultPort: String
    defaultDatabase: String
    defaultUser: String
}

extend type Query {
    # Get driver info
    driverList( id: ID ): [ DriverInfo! ]!
    driverProviderList: [ DriverProviderInfo! ]!
}

extend type Mutation {
    # Create new custom driver
    createDriver(config: DriverConfig!): DriverInfo!

    updateDriver(config: DriverConfig!): DriverInfo!

    deleteDriver(id: ID!): Boolean!

    deleteDriverLibraries(driverId: ID!, libraryIds: [ID!]!): Boolean!

}

